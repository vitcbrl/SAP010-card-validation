const validator = {
  isValid: function (creditCardNumber) {
    // Remove todos os espa√ßos em branco da entrada do usu√°rio
    creditCardNumber = creditCardNumber.replace(/\s/g, "");

    // Usando uma express√£o regex verifico se o valor tem apenas n√∫meros(dentro da minha condi√ß√£o estou testando se consiste em apenas digitos o-9)e se n√£o contem nenhum outro caractere como letras ou simbolos. esse ! √© um n√£o ent√£o estou dizendo que se n√£o consistir em apenas numeros √©pra retornar false
    if (!/^\d+$/.test(creditCardNumber)) {
      return false;
    }

    // Inverte os n√∫meros do valor
    const reversed = creditCardNumber.split("").reverse().join("");

    // Soma os d√≠gitos nas posi√ß√µes √≠mpares
    let sum = 0;
    for (let i = 0; i < reversed.length; i++) {
      let digit = parseInt(reversed[i]);
      //O m√©todo reverse() inverte os itens de um array. O primeiro elemento do array se torna o √∫ltimo e o √∫ltimo torna-se o primeiro.
      if (i % 2 !== 0) {
        digit *= 2;
        if (digit > 9) {
          digit -= 9;
        }
      }
      sum += digit;
    }

    // O n√∫mero √© v√°lido se a soma dos d√≠gitos √© m√∫ltiplo de 10
    return sum % 10 === 0;
  },

  maskify: function (creditCardNumber) {
    // Se o valor for menor ou igual a 4 caracteres, retorna ele mesmo
    if (creditCardNumber.length <= 4) {
      return creditCardNumber;
    }

    // Substitui todos os caracteres, exceto os √∫ltimos 4, por #
    const maskLength = creditCardNumber.length - 4;
    let mask = "";
    for (let i = 0; i < maskLength; i++) {
      // Substitui por um n√∫mero aleat√≥rio ou pelo emoji üê±
      mask += "#";
      //A fun√ß√£o Math.random() retorna um n√∫mero pseudo-aleat√≥rio no intervalo
    }
    return mask + creditCardNumber.substring(maskLength);
    //esse metodo substring extrai caracteres entre indices (posi√ß√µes) de uma string e retorna uma substring
  },
};

export default validator;
